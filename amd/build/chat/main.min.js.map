{"version":3,"file":"main.min.js","sources":["../../src/chat/main.js"],"sourcesContent":["/**\n * Main module for tutors experience view\n *\n * @module     local_digitalta/chat/main\n * @copyright  2024 ADSDR-FUNIBER Scepter Team\n */\n\nimport $ from 'jquery';\nimport Template from 'core/templates';\nimport Notification from 'core/notification';\nimport SELECTORS from 'local_digitalta/chat/selectors';\nimport { chatsGetRooms, chatsSendMessage, chatsGetMessage, markMessagesAsRead } from 'local_digitalta/repositories/chat_repository';\nimport setEventListeners from 'local_digitalta/chat/listeners';\nimport Status from 'local_digitalta/chat/status';\n\nconst status = new Status();\n\n/**\n * Create a chat in the target\n * @param {string} target\n * @param {int} experienceid\n * @param {boolean} single\n */\nexport default function createChatInTarget(target, experienceid = null, single = false) {\n    SELECTORS.TARGET = target;\n    initComponent(experienceid, single);\n    return;\n}\n\n/**\n * Initialize chat component\n * @param {*} experienceid\n * @param {*} single\n */\nconst initComponent = async (experienceid, single) => {\n    setEventListeners();\n    if (experienceid) {\n        openChatFromExperience(experienceid, single);\n    }\n    else {\n        renderMenuChat();\n    }\n    setInterval(reloaderMessages, 1000);\n};\n\n/**\n * Render menu chat\n */\nexport async function renderMenuChat() {\n    const { chatrooms } = await chatsGetRooms({experienceid: 0});\n    const chats = chatrooms.filter((chat) => chat.ownexperience === true);\n    const tutoringChats = chatrooms.filter((chat) => chat.ownexperience === false);\n    Template.render(SELECTORS.TEMPLATES.MENU_CHAT, {\n        tutoringChats : {\n            length: tutoringChats.length,\n            chats: tutoringChats,\n            unread: tutoringChats.filter((chat) => chat.unread_messages > 0).length\n        },\n        chats: {\n            length: chats.length,\n            chats: chats,\n            unread: chats.filter((chat) => chat.unread_messages > 0).length\n        },\n        isEmpty: tutoringChats.length === 0 && chats.length === 0,\n        wwwroot: M.cfg.wwwroot\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        status.emptyActiveMessages();\n        SELECTORS.OPEN_CHAT_ID = 0;\n        return;\n    }).fail(Notification.exception);\n}\n\n/**\n * Open chat\n * @param {number} id\n * @param {boolean} hideBack\n * Render chat\n */\nexport async function renderSingleChat(id, hideBack = false) {\n    const { messages } = await chatsGetMessage({ chatid: id });\n    SELECTORS.OPEN_CHAT_ID = id;\n    Template.render(SELECTORS.TEMPLATES.SINGLE_CHAT, {\n        hideBack\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        handlerMessages(messages);\n        status.activeMessages = messages;\n        return;\n    }).fail(Notification.exception);\n}\n\n/**\n * Open chat\n * @param {number} id\n * @param {boolean} hideBack\n * Render chat\n */\nexport async function renderChat(id, hideBack = false) {\n    const { messages, chatroom } = await chatsGetMessage({ chatid: id });\n    SELECTORS.OPEN_CHAT_ID = id;\n    Template.render(SELECTORS.TEMPLATES.CHAT, {\n        hideBack, chatroom\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        handlerMessages(messages);\n        status.activeMessages = messages;\n        return;\n    }).fail(Notification.exception);\n    await markMessagesAsRead({ chatid: id });\n}\n\n\n/**\n * Render messages in chat\n * @param {Array} messages\n */\nexport async function handlerMessages(messages) {\n    let html = '';\n    const promises = messages.map((msg) => {\n        const { message, timecreated, is_mine, userfullname, userpicture} = msg;\n        return renderMessage(message, timecreated, is_mine, userfullname, userpicture);\n    });\n    try {\n        html = (await Promise.all(promises)).join('');\n        $(SELECTORS.CONTAINERS.MESSAGES).html(html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n/**\n * Reload messages\n */\nexport async function reloaderMessages() {\n    if (SELECTORS.OPEN_CHAT_ID) {\n        const { messages } = await chatsGetMessage({ chatid: SELECTORS.OPEN_CHAT_ID });\n        handlerNewOtherMessage(messages);\n        return;\n    }\n}\n\n/**\n * Handler new other message\n * @param {object} messages\n */\nexport async function handlerNewOtherMessage(messages) {\n    const newMessages = findDefferencies(messages, status.activeMessages);\n    const promises = newMessages.map((msg) => {\n        const { message, timecreated, is_mine, userfullname, userpicture } = msg;\n        status.activeMessages.push(msg);\n        return renderMessage(message, timecreated, is_mine, userfullname, userpicture);\n    });\n    if (newMessages.length > 0) {\n        await markMessagesAsRead({ chatid: SELECTORS.OPEN_CHAT_ID, messageids: newMessages.map((msg) => msg.id) });\n    }\n    try {\n        const html = (await Promise.all(promises)).join('');\n        $(SELECTORS.CONTAINERS.MESSAGES).append(html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n\n/**\n * Check if two objects are equals\n * @param {Array} arr1\n * @param {Array} arr2\n * @returns {Array}\n */\nfunction findDefferencies(arr1, arr2) {\n    return arr1.filter(objeto1 => {\n        return !arr2.some(objeto2 => areEqualsByid(objeto1, objeto2));\n    });\n}\n\n/**\n * Check if two objects are equals\n * @param {object} objeto1\n * @param {object} objeto2\n * @returns {boolean}\n */\nfunction areEqualsByid(objeto1, objeto2) {\n    return objeto1.message === objeto2.message && objeto1.timecreated === objeto2.timecreated;\n}\n\n/**\n * Render my message\n * @param {string} text\n * @param {string} time\n * @param {boolean} mine\n * @param {string} userfullname\n * @param {string} userpicture\n * @returns {Promise}\n */\nexport async function renderMessage(text, time, mine, userfullname = '', userpicture = '') {\n    const TEMPLATE = mine ? SELECTORS.TEMPLATES.MY_MESSAGE : SELECTORS.TEMPLATES.OTHER_MESSAGE;\n    const timeInMilliseconds = time * 1000;\n    let dateString = '';\n    if (timeInMilliseconds < (Date.now() - (86400000))) {\n        dateString = new Date(timeInMilliseconds).toLocaleDateString();\n    }\n    const timeString =  new Date(time*1000).toLocaleTimeString([], { hour12: false, hour: '2-digit', minute: '2-digit' });\n    const dateTimeString = dateString ? `${dateString} ${timeString}` : timeString;\n    return Template.render(TEMPLATE, {text, time: dateTimeString, userfullname, userpicture});\n}\n\n/**\n * Handle send message\n * @returns {Promise}\n */\nexport async function handleSendMessage() {\n    const message = $(SELECTORS.INPUTS.CHAT_REPLY).val().trim();\n    chatsSendMessage({\n        chatid: SELECTORS.OPEN_CHAT_ID,\n        message,\n    }).then(() => {\n        $(SELECTORS.INPUTS.CHAT_REPLY).val('');\n        addNewMessage(message);\n        return;\n    }).fail(Notification.exception);\n    return;\n}\n\n/**\n * Add new message\n * @param {string} message\n */\nasync function addNewMessage(message) {\n    const date = Math.floor(Date.now() / 1000);\n    handlerNewOtherMessage([{message, timecreated: date, is_mine: true}]);\n}\n\n/**\n * Open chat from experience\n * @param {int} experienceid\n * @param {boolean} single\n */\nexport async function openChatFromExperience(experienceid, single=true) {\n    const {chatrooms} = await chatsGetRooms({experienceid});\n    if (chatrooms.length === 0) {\n        return;\n    }\n    // eslint-disable-next-line @babel/no-unused-expressions\n    single ? renderSingleChat(chatrooms[0].id, true) : renderChat(experienceid);\n}\n\n/**\n * Render menu tutor\n * @returns {Promise}\n */\nexport async function renderMenuTutor() {\n    Template.render(SELECTORS.TEMPLATES.MENU_MENTOR, {}).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        return;\n    }).fail(Notification.exception);\n}"],"names":["target","experienceid","single","TARGET","initComponent","message","SELECTORS","INPUTS","CHAT_REPLY","val","trim","chatid","OPEN_CHAT_ID","then","date","Math","floor","Date","now","handlerNewOtherMessage","timecreated","is_mine","addNewMessage","fail","Notification","exception","render","TEMPLATES","MENU_MENTOR","html","status","async","openChatFromExperience","renderMenuChat","setInterval","reloaderMessages","chatrooms","chats","filter","chat","ownexperience","tutoringChats","MENU_CHAT","length","unread","unread_messages","isEmpty","wwwroot","M","cfg","emptyActiveMessages","renderSingleChat","id","hideBack","messages","SINGLE_CHAT","handlerMessages","activeMessages","renderChat","chatroom","CHAT","promises","map","msg","userfullname","userpicture","renderMessage","Promise","all","join","CONTAINERS","MESSAGES","error","newMessages","arr1","arr2","objeto1","some","objeto2","areEqualsByid","push","messageids","append","text","time","mine","TEMPLATE","MY_MESSAGE","OTHER_MESSAGE","timeInMilliseconds","dateString","toLocaleDateString","timeString","toLocaleTimeString","hour12","hour","minute","dateTimeString","Template"],"mappings":"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"}